// <auto-generated />
using System;
using System.Collections.Generic;
using Axis.DataAccess.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Axis.DataAccess.Migrations
{
    [DbContext(typeof(AxisDbContext))]
    [Migration("20241231144423_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Axis.Core.Models.Company", b =>
                {
                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<string>("CountryId")
                        .HasColumnType("text")
                        .HasColumnName("countryid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ComId")
                        .HasName("pk_company");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_company_countryid");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("localname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phonecode");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shortname");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.BankInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accountname");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accountnumber");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accounttype");

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankaddress");

                    b.Property<string>("BankBranch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankbranch");

                    b.Property<string>("BankCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankcity");

                    b.Property<string>("BankContactPerson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankcontactperson");

                    b.Property<string>("BankContactPersonPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankcontactpersonphone");

                    b.Property<string>("BankCountry")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankcountry");

                    b.Property<string>("BankEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankemail");

                    b.Property<string>("BankFax")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankfax");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankname");

                    b.Property<string>("BankPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankphone");

                    b.Property<string>("BankWebsite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bankwebsite");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iban");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("swiftcode");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_bankinfo");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_bankinfo_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_bankinfo_empid");

                    b.ToTable("bankinfo", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.ContactInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("isprimary");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PrimaryContactNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primarycontactnumber");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship");

                    b.Property<string>("SecondaryContactNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secondarycontactnumber");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_contactinfo");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_contactinfo_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_contactinfo_empid");

                    b.ToTable("contactinfo", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.Education", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("countrycode");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("degree");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<DateTime>("GraduationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graduationdate");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institutionname");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("major");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postalcode");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_educations");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_educations_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_educations_empid");

                    b.ToTable("educations", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmpCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("certificatenumber");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateissued");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationdate");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_empcertificate");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_empcertificate_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_empcertificate_empid");

                    b.ToTable("empcertificate", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmpTaxInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<decimal>("AdditionalWithholding")
                        .HasColumnType("numeric")
                        .HasColumnName("additionalwithholding");

                    b.Property<int>("Allowances")
                        .HasColumnType("integer")
                        .HasColumnName("allowances");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employeeid");

                    b.Property<bool>("IsExempt")
                        .HasColumnType("boolean")
                        .HasColumnName("isexempt");

                    b.Property<string>("LocalTaxIdentification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("localtaxidentification");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("socialsecuritynumber");

                    b.Property<string>("StateTaxIdentification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statetaxidentification");

                    b.Property<string>("TaxFilingStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("taxfilingstatus");

                    b.Property<string>("TaxIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("taxidentificationnumber");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_emptaxinfos");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_emptaxinfos_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_emptaxinfos_empid");

                    b.ToTable("emptaxinfos", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("Certifications")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("certifications");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergencycontactname");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergencycontactphone");

                    b.Property<string>("EmergencyContactRelationship")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergencycontactrelationship");

                    b.Property<string>("EmpCode")
                        .HasColumnType("text")
                        .HasColumnName("empcode");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("HealthInsuranceProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("healthinsuranceprovider");

                    b.Property<bool>("IsEligibleForBenefits")
                        .HasColumnType("boolean")
                        .HasColumnName("iseligibleforbenefits");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("maritalstatus");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<string>("RetirementPlan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("retirementplan");

                    b.PrimitiveCollection<List<string>>("Skills")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("skills");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("text")
                        .HasColumnName("socialsecuritynumber");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_employees_comid");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmployeeAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zipcode");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_employeeaddresses");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_employeeaddresses_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_employeeaddresses_empid");

                    b.ToTable("employeeaddresses", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmployeeFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateuploaded");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filepath");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filetype");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_employeefiles");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_employeefiles_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_employeefiles_empid");

                    b.ToTable("employeefiles", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.FamilyInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contactnumber");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDependent")
                        .HasColumnType("boolean")
                        .HasColumnName("isdependent");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_familyinfos");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_familyinfos_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_familyinfos_empid");

                    b.ToTable("familyinfos", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.JobInformation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contractenddate");

                    b.Property<string>("ContractPeriod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contractperiod");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contractstartdate");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateofhire");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employeeid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employmenttype");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("joblocation");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jobtitle");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_jobinformations");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_jobinformations_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_jobinformations_empid");

                    b.ToTable("jobinformations", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HR.WorkExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("achievements");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("companyname");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("EmpId")
                        .HasColumnType("text")
                        .HasColumnName("empid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jobtitle");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responsibilities");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_workexperiences");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_workexperiences_comid");

                    b.HasIndex("EmpId")
                        .HasDatabaseName("ix_workexperiences_empid");

                    b.ToTable("workexperiences", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("DeptCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deptcode");

                    b.Property<string>("DeptLocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deptlocalname");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deptname");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<short?>("slno")
                        .HasColumnType("smallint")
                        .HasColumnName("slno");

                    b.HasKey("Id")
                        .HasName("pk_department");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_department_comid");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Designation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("DesigLocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("desiglocalname");

                    b.Property<string>("DesigName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("designame");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("SalaryRange")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("salaryrange");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<decimal?>("attbonus")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("attbonus");

                    b.Property<decimal?>("gsmin")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("gsmin");

                    b.Property<decimal?>("holidaybonus")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("holidaybonus");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<decimal>("nightallow")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("nightallow");

                    b.Property<int?>("proposedmanpower")
                        .HasColumnType("integer")
                        .HasColumnName("proposedmanpower");

                    b.Property<int?>("slno")
                        .HasColumnType("integer")
                        .HasColumnName("slno");

                    b.Property<int?>("ttlmanpower")
                        .HasColumnType("integer")
                        .HasColumnName("ttlmanpower");

                    b.HasKey("Id")
                        .HasName("pk_designation");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_designation_comid");

                    b.ToTable("designation", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Floor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("FloorLocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("floorlocalname");

                    b.Property<string>("FloorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("floorname");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_floor");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_floor_comid");

                    b.ToTable("floor", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Grade", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("GradeLocalName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("gradelocalname");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("gradename");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("salaryrange");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<double?>("mings")
                        .HasColumnType("double precision")
                        .HasColumnName("mings");

                    b.Property<int?>("slno")
                        .HasColumnType("integer")
                        .HasColumnName("slno");

                    b.Property<int?>("ttlmanpower")
                        .HasColumnType("integer")
                        .HasColumnName("ttlmanpower");

                    b.Property<int?>("ttlmanpowerworker")
                        .HasColumnType("integer")
                        .HasColumnName("ttlmanpowerworker");

                    b.HasKey("Id")
                        .HasName("pk_grade");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_grade_comid");

                    b.ToTable("grade", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Line", b =>
                {
                    b.Property<int>("lineid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lineid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("lineid"));

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("LineLocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("linelocalname");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("linename");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("lineid")
                        .HasName("pk_line");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_line_comid");

                    b.ToTable("line", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("SectLocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sectlocalname");

                    b.Property<string>("SectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sectname");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<int?>("slno")
                        .HasColumnType("integer")
                        .HasColumnName("slno");

                    b.HasKey("Id")
                        .HasName("pk_section");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_section_comid");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Shift", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("ShiftCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("shiftcode");

                    b.Property<string>("ShiftDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("shiftdesc");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("shiftname");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<bool?>("isinactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isinactive");

                    b.Property<DateTime>("lunchin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lunchin");

                    b.Property<DateTime>("lunchout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lunchout");

                    b.Property<DateTime>("lunchtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lunchtime");

                    b.Property<DateTime>("reghour")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reghour");

                    b.Property<string>("shiftcat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shiftcat");

                    b.Property<DateTime>("shiftin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shiftin");

                    b.Property<DateTime>("shiftlate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shiftlate");

                    b.Property<DateTime>("shiftout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shiftout");

                    b.Property<string>("shifttype")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shifttype");

                    b.Property<DateTime>("tiffinin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffinin");

                    b.Property<DateTime>("tiffinout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffinout");

                    b.Property<DateTime>("tiffintime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffintime");

                    b.Property<DateTime?>("tiffintime1")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffintime1");

                    b.Property<DateTime?>("tiffintime2")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffintime2");

                    b.Property<DateTime?>("tiffintimein1")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffintimein1");

                    b.Property<DateTime?>("tiffintimein2")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tiffintimein2");

                    b.HasKey("Id")
                        .HasName("pk_shift");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_shift_comid");

                    b.ToTable("shift", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ComId")
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifieddate");

                    b.Property<string>("UnitLocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unitlocalname");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unitname");

                    b.Property<string>("UnitShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unitshortname");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<bool?>("isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("Id")
                        .HasName("pk_unit");

                    b.HasIndex("ComId")
                        .HasDatabaseName("ix_unit_comid");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("Axis.Core.Models.Company", b =>
                {
                    b.HasOne("Axis.Core.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_company_country_countryid");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.BankInfo", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_bankinfo_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("BankInfos")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_bankinfo_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.ContactInfo", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_contactinfo_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("ContactInfos")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_contactinfo_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.Education", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_educations_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("Educations")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_educations_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmpCertificate", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_empcertificate_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("EmpCertificates")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_empcertificate_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmpTaxInfo", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_emptaxinfos_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("EmpTaxInfos")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_emptaxinfos_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.Employee", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_employees_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmployeeAddress", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_employeeaddresses_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_employeeaddresses_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.EmployeeFile", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_employeefiles_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("EmployeeFiles")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_employeefiles_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.FamilyInfo", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_familyinfos_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("FamilyInfos")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_familyinfos_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.JobInformation", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_jobinformations_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("JobInformations")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_jobinformations_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.WorkExperience", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_workexperiences_company_comid");

                    b.HasOne("Axis.Core.Models.HR.Employee", "Employee")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("fk_workexperiences_employees_empid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Department", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_department_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Designation", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Designations")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_designation_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Floor", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Floors")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_floor_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Grade", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Grades")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_grade_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Line", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Lines")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_line_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Section", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Sections")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_section_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Shift", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Shifts")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_shift_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.HouseKeeping.Unit", b =>
                {
                    b.HasOne("Axis.Core.Models.Company", "Company")
                        .WithMany("Units")
                        .HasForeignKey("ComId")
                        .HasConstraintName("fk_unit_company_comid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Axis.Core.Models.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Designations");

                    b.Navigation("Employees");

                    b.Navigation("Floors");

                    b.Navigation("Grades");

                    b.Navigation("Lines");

                    b.Navigation("Sections");

                    b.Navigation("Shifts");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("Axis.Core.Models.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Axis.Core.Models.HR.Employee", b =>
                {
                    b.Navigation("BankInfos");

                    b.Navigation("ContactInfos");

                    b.Navigation("Educations");

                    b.Navigation("EmpCertificates");

                    b.Navigation("EmpTaxInfos");

                    b.Navigation("EmployeeAddresses");

                    b.Navigation("EmployeeFiles");

                    b.Navigation("FamilyInfos");

                    b.Navigation("JobInformations");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
